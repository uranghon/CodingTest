package org.example.Backjoon.약수_배수_소수_더빠르게;

import java.util.Scanner;

/**
 * 서강대학교 컴퓨터공학과 실습실 R912호에는 현재 N개의 창문이 있고 또 N명의 사람이 있다.
 * 1번째 사람은 1의 배수 번째 창문을 열려 있으면 닫고 닫혀 있으면 연다.
 * 2번째 사람은 2의 배수 번째 창문을 열려 있으면 닫고 닫혀 있으면 연다.
 * 이러한 행동을 N번째 사람까지 진행한 후 열려 있는 창문의 개수를 구하라.
 * 단, 처음에 모든 창문은 닫혀 있다.
 *
 * 예를 들어 현재 3개의 창문이 있고 3명의 사람이 있을 때,
 *
 * 1번째 사람은 1의 배수인 1,2,3번 창문을 연다. (1, 1, 1)
 * 2번째 사람은 2의 배수인 2번 창문을 닫는다. (1, 0, 1)
 * 3번째 사람은 3의 배수인 3번 창문을 닫는다. (1, 0, 0)
 * 결과적으로 마지막에 열려 있는 창문의 개수는 1개 이다.
 *
 * 이를 잘 해석하면 i 번째 위치의 창문은 홀수번째 약수가 도달할때 열리고 짝수번째 약수가 도달할때 닫힌다.
 * 즉 마지막 약수가 홀수번째면 열려있고, 짝수번째면 닫혀있다.
 * 여기서 활용할 지식이 아래 지식이다.
 *
 * ---------------------------
 *
 * 어떤 수 A는 x*y로 나타낼 수 있다.
 * 즉, A의 약수들은 쌍을 이룬다.
 * 그렇게 되면 항상 약수의 개수가 짝수 개인 게 아닌가? 라는 생각이 들 수도 있지만
 * 단 한가지 경우!! x와 y가 같은 쌍일경우 이 쌍은 홀수이다.
 * 즉, A = x^2 으로 나타낼 수 있으면 A의 약수의 개수는
 * 기본쌍 n개(2 * n = 짝수) + 제곱근쌍 1개.(1 = 홀수)
 * -> 짝수 + 홀수 = 홀수
 * 으로 홀수이다.
 *
 * ---------------------------
 *
 * 이를 활용하면 숫자 N 이 주어졌을 때, N보다 작거나 같은 수 중에서 제곱수의 갯수를 찾으면
 * 열려있는 창문의 갯수이다.
 *
 * 이를 더 잘 활용하면 예를들어 N이 5일 때, 5의 제곱근은 2.2360679.... 인데,
 * 5보다 작은 수 중에 1과 2 를 제곱근으로 가지는 수가 존재한다는 거다.
 * 즉 (int) Math.sqrt(N) 이면 N보다 작거나 같은 수중에 제곱수의 갯수 이다.
 */
public class Example_13909_창문닫기 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print((int)Math.sqrt(sc.nextInt()));
    }
}
